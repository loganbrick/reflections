What happens when you initialize a repository? Why do you need to do it?

Git creates the structure that it needs in order to receive commits. To initialize a structure, one only has to run the command 'git init'.

How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is the collection of files to be committed. It offers the user the ability to pick and choose which files to commit. This way, the user can determine which files still need further refining before they can be added to the commit.

How can you use the staging area to make sure you have one commit per logical change?

The staging area allows a user to select only the files they've alterred between commits. The user can then use the staging area as a very specific comparison area to pinpoint the changes between the last commit and the new changes.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches keep histories organized by allowing programmers the freedon of making radical or severe changes to code without completely ruing the workflow of all current versions of that program. Branches can be helpful in testing experimental changes that may break working builds of a program while they are being worked on.

How do the diagrams help you visualize the branch structure?

The diagrams make each of the commits and branches more readable. From these diagrams, it's far easier to trace readability and "lineage" of features of a program as each are connected by arrows and it's immediately obviouse where each commit stems from.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Git's automatic merging is great because it merges all of the "brainless" lines of code. It doesn't require the programmer waste time sifting through two code files of non-conflicting lines. A con is that sometimes code does conflict. In that case, git requires the programmer to look into the code and determine the severity of the conflict. It may require the programmer to speak to another programmer to learn and clarify the changes they both made.